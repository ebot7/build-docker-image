name: 'e-bot7 core docker image builder'
description: 'Use this action to build and push docker images to ECR'
inputs:
  ecr-repository:
    required: true
    description: name of the ecr namespace
  build-args:
    required: false
    description: >
      additional build arguments to be passed when building the dockerfile.
      This should have the form "ARG_NAME=value". If several build arguments are required, 
      delimit them by a newline 
      "|
        ARG_NAME_1=value
        ARG_NAME_2=value2
      "
  secret:
    required: false
    description: >
      allow providing --secret to the docker build command.
      See https://docs.docker.com/develop/develop-images/build_enhancements/#new-docker-build-secret-information
      for required changes to the Dockerfile.
  aws-access-key-id:
    required: true
    description: aws creds to login to ecr repo
  aws-secret-access-key:
    required: true
    description: aws creds to login to ecr repo
  dockerfile-path:
    required: false
    description: The dockerfile path to build from
    default: ./Dockerfile
outputs:
    image_tag: 
      description: Docker tag of image which is based on commit sha
      value: ${{ steps.sha.outputs.sha_short }}
    ecr_registry:
      description: the ECR registry to which the image was pushed
      value: ${{ steps.login-ecr.outputs.registry }}
    ecr_repository:
      description: the ECR repository to which the image was pushed
      value: ${{ inputs.ecr-repository }}
runs:
    using: composite
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ inputs.aws-access-key-id }}
          aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create short SHA
        id: sha
        shell: bash
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Build, tag, and push docker image to Amazon ECR
        shell: bash
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.ecr-repository }}
          COMMIT: ${{ steps.sha.outputs.sha_short}}
          BUILDKIT_INLINE_CACHE: 1
          DOCKER_BUILDKIT: 1
        run: |
          ref=${{ github.event.pull_request.head.ref }}
          [ -z "$ref" ] && ref=${{ github.ref }}
          build_timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")#
          branch=$(echo $ref | sed "s/refs\/heads\///g" | sed -r 's/[^-_.a-zA-Z0-9]+/_/g')

          # Pull images to make caching work.
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$branch || docker pull $ECR_REGISTRY/$ECR_REPOSITORY:master || true

          if [ -n '${{ inputs.build-args }}' ]
          then
            build_args_unparsed='${{ inputs.build-args }}'
            # As of https://stackoverflow.com/questions/19771965/split-bash-string-by-newline-characters
            DEFAULT_IFS=$IFS
            IFS=$'\n' build_args_list=($build_args_unparsed)
            IFS=$DEFAULT_IFS

            set_additional_build_args=''
            for item in ${build_args_list[@]}
            do
              set_additional_build_args="${set_additional_build_args} --build-arg ${item}"
            done
            echo "Using build argument(s): ${build_args_list[*]}"
          fi

          if [ -n '${{ inputs.secret }}' ]
          then
            echo "Using secret configuration: ${{ inputs.secret }}"
            set_secret="--secret ${{ inputs.secret }}"
          fi
          
          tag_commit="${ECR_REGISTRY}/${ECR_REPOSITORY}:${COMMIT}" # use this to deploy
          tag_branch="${ECR_REGISTRY}/${ECR_REPOSITORY}:${branch}"
          tag_legacy="${ECR_REGISTRY}/${ECR_REPOSITORY}:${APP_NAME}-${branch}-${COMMIT}"
          echo "Building image with tags [${tag_commit}, ${tag_branch}, ${tag_legacy}]"
          docker build \
            -t $tag_commit \
            -t $tag_branch \
            --cache-from $ECR_REGISTRY/$ECR_REPOSITORY:$branch \
            --cache-from $ECR_REGISTRY/$ECR_REPOSITORY:master \
            --label io.eb7.git_branch="$branch" \
            --label io.eb7.log_format=json \
            --label io.eb7.group=application \
            --label org.label-schema.schema-version="1.0.0-rc.1" \
            --label org.label-schema.vendor="e-bot7 GmbH" \
            --label org.label-schema.build-date="$build_timestamp" \
            --label org.label-schema.name="$ECR_REPOSITORY" \
            -f ${{ inputs.dockerfile-path }} \
            $set_additional_build_args \
            $set_secret \
            .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY --all-tags
