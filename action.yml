name: 'e-bot7 core docker image builder'
description: 'Use this action to build and push docker images to ECR'
inputs:
  ecr-repository:
    required: true
    description: name of the ecr namespace
  build-args:
    required: false
    description: >
      additional build arguments to be passed when building the dockerfile.
      This should have the form "ARG_NAME=value". If several build arguments are required, 
      delimit them by a newline 
      "|
        ARG_NAME_1=value
        ARG_NAME_2=value2
      "
  secret:
    required: false
    description: >
      allow providing secret values,
      see https://github.com/docker/build-push-action/blob/master/docs/advanced/secrets.md
  secret-files:
    required: false
    description: >
      allow providing a secret file, 
      see https://github.com/docker/build-push-action/blob/master/docs/advanced/secrets.md
  aws-access-key-id:
    required: true
    description: aws creds to login to ecr repo
  aws-secret-access-key:
    required: true
    description: aws creds to login to ecr repo
  dockerfile-path:
    required: false
    description: The dockerfile path to build from
    default: ./Dockerfile
outputs:
    image_tag: 
      description: Docker tag of image which is based on commit sha
      value: ${{ steps.sha.outputs.sha_short }}
    ecr_registry:
      description: the ECR registry to which the image was pushed
      value: ${{ steps.login-ecr.outputs.registry }}
    ecr_repository:
      description: the ECR repository to which the image was pushed
      value: ${{ inputs.ecr-repository }}
runs:
    using: composite
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ inputs.aws-access-key-id }}
          aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create short SHA
        id: sha
        shell: bash
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Build, tag, and push docker image to Amazon ECR
        shell: bash
        id: config
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.ecr-repository }}
          COMMIT: ${{ steps.sha.outputs.sha_short}}
        run: |
          ref=${{ github.event.pull_request.head.ref }}
          [ -z "$ref" ] && ref=${{ github.ref }}
          build_timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")#
          branch=$(echo $ref | sed "s/refs\/heads\///g" | sed -r 's/[^-_.a-zA-Z0-9]+/_/g')
          
          tag_commit="${ECR_REGISTRY}/${ECR_REPOSITORY}:${COMMIT}" # use this to deploy
          tag_branch="${ECR_REGISTRY}/${ECR_REPOSITORY}:${branch}"
          tag_branch_commit="${ECR_REGISTRY}/${ECR_REPOSITORY}:${branch}-${COMMIT}"

          echo "::set-output name=tags::$tag_commit,$tag_branch,$tag_branch_commit"
          echo "::set-output name=build_timestamp::$build_timestamp"
          echo "::set-output name=branch::$branch"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.config.outputs.tags}}
          labels: |
            io.eb7.git_branch="${{ steps.config.outputs.branch}}"
            io.eb7.log_format=json
            io.eb7.group=application
            org.label-schema.schema-version="1.0.0-rc.1"
            org.label-schema.vendor="e-bot7 GmbH"
            org.label-schema.build-date="${{ steps.config.outputs.build_timestamp}}"
            org.label-schema.name="$ECR_REPOSITORY"
          build-args: ${{ inputs.build-args }}
          file: ${{ inputs.dockerfile-path }}
          secrets: ${{ inputs.secret }}
          secret-files: ${{ inputs.secret-files }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

